\\\\&=\\theta^{(\\alpha+x)-1}(1-\\theta)^{(\\beta+n-x)-1}
\\\\&=Beta(\\theta|\\alpha+x, \\beta+n-x)
\\\\&=Beta(\\theta|\\textbf{%.2f}, \\textbf{%.2f})
\\end{align}$$', sum(alpha, k), sum(beta, n, -k))))
return(uiElement)
})
## point estimate calculations
output$pointEst_Prior <- renderTable({
validate(
need(!(input$n==0), NULL)
)
alpha <- input$alpha
beta  <- input$beta
beta_mode <- betaMode(alpha, beta)
beta_mean <- betaMean(alpha, beta)
beta_std  <- betaStd(alpha, beta)
pE <- data.frame(Type=c("Mode", "Mean", "Std"),
PointEstimate=c(beta_mode, beta_mean, beta_std))
return(pE)
})
output$pointEst_Likelihood <- renderTable({
x <- x()
n <- input$n
validate(
need(!(input$n==0), NULL)
)
k <- switch(input$radioSample,
"prob" = sum(x),
"successes" = input$k,
probInput)
alpha <- k + 1
beta <- n - k + 1
beta_mode <- betaMode(alpha, beta)
beta_mean <- betaMean(alpha, beta)
beta_std  <- betaStd(alpha, beta)
pE <- data.frame(Type=c("Mode", "Mean", "Std"),
PointEstimate=c(beta_mode, beta_mean, beta_std))
return(pE)
})
output$pointEst_Posterior <- renderTable({
x <- x()
n <- input$n
validate(
need(n!=0, NULL)
)
k <- switch(input$radioSample,
"prob" = sum(x),
"successes" = input$k,
probInput)
alpha <- input$alpha + k
beta <- input$beta + n - k
beta_mode <- betaMode(alpha, beta)
beta_mean <- betaMean(alpha, beta)
beta_std  <- betaStd(alpha, beta)
pE <- data.frame(Type=c("Mode", "Mean", "Std"),
PointEstimate=c(beta_mode, beta_mean, beta_std))
return(pE)
})
})
runApp()
runApp()
library(ggplot2)
library(reshape2)
## p(theta|k, alpha, beta)
densbeta <- function(theta, n, k, alpha=1, beta=1) {
stopifnot((theta < 1 || theta > 0) )
x <- dbeta(theta, alpha+k, beta+n-k)
return(x)
}
## P(theta <= theta_0|k, alpha, beta)
probbeta <- function(theta, n, k, alpha=1, beta=1) {
stopifnot(theta >= 0)
stopifnot(theta <= 1)
# x <- pbeta(theta, alpha+k, beta+n-k)
x <- cumsum(densbeta(theta, alpha, beta, n, k))
return(x)
}
#' Reimplementation of PROBNML function in SAS
#' @description computes the probability that an observation from a
#'              binomial distribution Bin(n,theta) will be less than or equal to k.
#'
#' @param theta is the probability of success for the
#'              binomial distribution, where 0<=theta<=1.
#'              In terms of acceptance sampling, is the
#'              probability of selecting a nonconforming item.
#' @param n is the number of independent Bernoulli trials in the
#'          binomial distribution, where n>=1. In terms of acceptance
#'          sampling, n is the number of items in the sample.
#' @param k is the number of successes, where 0<=k<=n. In terms of acceptance
#'          sampling, is the number of nonconforming items.
#'
#' @return computes the probability that an observation from a
#'         binomial distribution Bin(n,theta) will be less than or equal to k.
#' @export
probbnml <- function(theta, n, k) {
stopifnot(theta >= 0)
stopifnot(theta <= 1)
stopifnot(n >= 1)
x <- sum(sapply(0:k, function(j) choose(n, j)*(theta**j)*((1-theta)**(n-j))))
return(x)
}
crit_k <- function(theta, prob, n, alpha=1, beta=1, type=c("go", "nogo")) {
stopifnot(theta >= 0)
stopifnot(theta <= 1)
stopifnot(prob >= 0)
stopifnot(prob <= 1)
stopifnot(type %in% c("go", "nogo"))
x <- sapply(0:n, function(k) densbeta(theta, n, k, alpha, beta))
x <- x/length(x)
x <- cumsum(x)
k <- ifelse(type=="go",
which.min(x <= prob),
which.max(x >= 1-prob))
return(k)
}
plotPower <- function(theta, go_power, nogo_power) {
data <- data.frame(theta=theta, NoGo=no_go_pwr, Go=go_pwr,
Indecisive=indecisive_pwr)
data.molten <- melt(data, id.vars = "theta")
colnames(data.molten) <- c("theta", "Function", "Power")
ggplot(data.molten, aes(x=theta, y=Power, color=Function)) +
geom_line() +
scale_x_continuous(breaks=seq(0,1,by=.1)) +
scale_y_continuous(breaks=seq(0,1,by=.1))
}
#####
# thetas <- seq(0,1,by=0.01)
# args <- list(theta=thetas,
#              alpha=alpha, beta=beta,
#              n=n, k=k)
# ## plot f1 over all thetas
# x <- do.call(f1, args)
# x <- x/length(thetas)
# plot(thetas, x)
# ## plot F1 = P(theta <= theta_0|k, alpha, beta) over all thetas
# x <- do.call(F1, args)
# plot(thetas, x)
# ## plot 1-F1 = 1-P(theta <= theta_0|k, alpha, beta) over all thetas
# x <- 1-do.call(F1, args)
# plot(thetas, x)
#
# theta <- .5
# ks <- 1:n
# args <- list(theta=theta,
#              alpha=alpha, beta=beta,
#              n=n, k=ks)
# ## plot f1 over all k's, with 1<=k<=n
# x <- do.call(f1, args)
# x <- x/length(x)
# plot(ks, x)
# ## plot F1 = P(theta <= theta_0|k, alpha, beta) over all over all k's, with 1<=k<=n
# x <- do.call(F1, args)
# x <- x/length(x)
# plot(ks, x)
# ## plot 1-F1 = 1-P(theta <= theta_0|k, alpha, beta) over all over all k's, with 1<=k<=n
# # x <- 1-do.call(F1, args)
# # plot(ks, x)
#####
n <- 12 ## sample size
alpha <- .5
beta  <- .5
theta <- .3
p_go <- .9
p_nogo <- .9
## Compute probability P(k|theta) and estimate critical k for which
## the following conditions are fullfilled
## 1) "Go" decision iff P(theta <= theta_go|k_go) < 1 - p_go
## 2) "No Go" decision iff P(theta <= theta_nogo|k_nogo) < p_nogo
##
## Condition 1 can be solved by searching the greatest k with
## cumsum(dbeta(theta_go, alpha+k, beta+n-k)) <= 1 - p_go
##
## Condition 2 can be solved by searching the greatest k with
## cumsum(dbeta(theta_nogo, alpha+k, beta+n-k)) >= p_nogo
k_nogo <- crit_k(theta=theta, prob=p_nogo, n=n, alpha=alpha, beta=beta, type="nogo")
k_go <- crit_k(theta=theta, prob=p_go, n=n, alpha=alpha, beta=beta, type="go")
k_go
k_nogo
n      <- 12 ## sample size
alpha  <- .5
beta   <- .5
theta  <- .3
p_go   <- .9
p_nogo <- .9
## Compute probability P(k|theta) and estimate critical k for which
## the following conditions are fullfilled
## 1) "Go" decision iff P(theta <= theta_go|k_go) < 1 - p_go
## 2) "No Go" decision iff P(theta <= theta_nogo|k_nogo) < p_nogo
##
## Condition 1 can be solved by searching the greatest k with
## cumsum(dbeta(theta_go, alpha+k, beta+n-k)) <= 1 - p_go
##
## Condition 2 can be solved by searching the greatest k with
## cumsum(dbeta(theta_nogo, alpha+k, beta+n-k)) >= p_nogo
k_nogo <- crit_k(theta=theta, prob=p_nogo, n=n, alpha=alpha, beta=beta, type="nogo")
k_go <- crit_k(theta=theta, prob=p_go, n=n, alpha=alpha, beta=beta, type="go")
## Go Power
theta <- seq(0, 1, by=.001)
go_pwr <- sapply(theta, function(theta) probbnml(theta, n, k_go))
go_pwr <- 1-go_pwr
plot(go_pwr)
## No Go Power
no_go_pwr <- sapply(theta, function(theta) probbnml(theta, n, k_nogo))
plot(no_go_pwr)
## Indecisive Power
indecisive_pwr <- 1 - no_go_pwr - go_pwr
plot(indecisive_pwr)
plotPower(theta, go_pwr, no_go_pwr)
# ## Sanity check
# a <- no_go_pwr[which.max(indecisive_pwr)]
# b <- go_pwr[which.max(indecisive_pwr)]
# c <- max(indecisive_pwr)
# sum(a, b, c)
sprintf("n=%i", n)
sprintf("p_go=%.2f", p_go)
sprintf("p_nogo=%.2f", p_nogo)
sprintf("k_go=%i", k_go)
sprintf("k_nogo=%i", k_nogo)
sprintf("Go (k>=%i)", k_go)
sprintf("No Go (k<=%i)", k_nogo)
sprintf("Indecisive (%i<=k<=%i)", k_nogo, k_go)
prob_go <- cumsum(sapply(0:n, function(k) densbeta(theta = .3, n, k, alpha, beta)))
prob_go <- prob_go/length(prob_go)
plot(prob_go)
print(k_go)
prob_nogo <- cumsum(sapply(0:n, function(k) densbeta(theta = .3, n, k, alpha, beta)))
prob_nogo <- prob_nogo/length(prob_nogo)
plot(prob_nogo)
print(k_nogo)
data <- data.frame(k=0:n,
Go=prob_go,
NoGo=prob_nogo)
head(data)
data[data$k==data_go]
data[data$k==data_go,]
data[data$k==k_go,]
data[data$k==k_go-1,]
data[data$k==k_go+1,]
data[data$k==k_go,]
data[data$k==k_go-2,]
data[data$k==k_go-1,]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
which.min(c(3,1,2))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(sapply(0:10,dbeta(.5,10,k,1,10))
)
plot(sapply(0:10, function(k) dbeta(.5,10,k,1,10)))
plot(sapply(0:10, function(k) dbeta(.5, 1+k, 10+10-k)))
sum(sapply(0:10, function(k) dbeta(.5, 1+k, 10+10-k)))
sapply(0:10, function(k) dbeta(.5, 1+k, 10+10-k))
theta<- .5
alpha <- 1
beta <- 10
n <- 30
sapply(0:n, function(k), dbeta(theta, alpha+k, beta+n-k))
sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
plot(sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k)))
sum(sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k)))
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
k <- 10
dens_theta <- sapply(0:1, function(theta) dbeta(theta, alpha+k, beta+n-k))
plot(dens_k)
plot(dens_theta)
dens_theta <- sapply(seq(0,1,by=.001), function(theta) dbeta(theta, alpha+k, beta+n-k))
dens_theta
plot(dens_theta)
sum(dens_theta)
k <- 10
theta <- seq(0,1,by=.001)
dens_theta <- sapply(theta, function(theta) dbeta(theta, alpha+k, beta+n-k))
plot(dens_theta)
sum(dens_theta)
k <- 10
theta <- seq(0,1,by=.001)
dens_theta <- sapply(theta, function(theta) dbeta(theta, alpha+k, beta+n-k))
sum(dens_theta)
dens_theta <- dens_theta/sum(dens_theta)
k <- 10
theta <- seq(0,1,by=.001)
dens_theta <- sapply(theta, function(theta) dbeta(theta, alpha+k, beta+n-k))
dens_theta <- dens_theta/length(dens_theta)
sum(dens_theta)
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha, beta))
sum(dens_k)
theta<- .5
alpha <- 1
beta <- 10
n <- 30
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
dens_k
sum(dens_k)
plot(dens_k)
theta<- .5
alpha <- .5
beta <- .5
n <- 30
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
plot(dens_k)
theta<- .1
alpha <- .5
beta <- .5
n <- 30
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
plot(dens_k)
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
plot(dens_k)
?beta
my_dbeta <- function(theta, n, k, alpha, beta) {
a <- beta(alpha+k, beta+n-k)*choose(n, k)
b <- beta(alpha, beta)
x <- a/b
return(x)
}
theta<- .1
alpha <- .5
beta <- .5
n <- 30
my_dbeta <- function(theta, n, k, alpha, beta) {
a <- beta(alpha+k, beta+n-k)*choose(n, k)
b <- beta(alpha, beta)
x <- a/b
return(x)
}
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, alpha+k, beta+n-k))
theta<- .1
alpha <- .5
beta <- .5
n <- 30
my_dbeta <- function(theta, n, k, alpha, beta) {
a <- base::beta(alpha+k, beta+n-k)*choose(n, k)
b <- base::beta(alpha, beta)
x <- a/b
return(x)
}
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, alpha+k, beta+n-k))
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, alpha+k, beta+n-k))
theta<- .1
alpha <- .5
beta <- .5
n <- 30
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, n, k, alpha, beta))
plot(mydens_k)
plot(dens_k)
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, n, k, alpha, beta))
plot(mydens_k)
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
plot(dens_k)
plot(mydens_k)
sum(mydens_k)
mydens_theta <- sapply(theta, function(k) my_dbeta(theta, n, k, alpha, beta))
plot(mydens_theta)
mydens_theta <- sapply(theta, function(theta) my_dbeta(theta, n, k, alpha, beta))
plot(mydens_theta)
k <- 10
theta <- seq(0, 1, by=.001)
mydens_theta <- sapply(theta, function(theta) my_dbeta(theta, n, k, alpha, beta))
plot(mydens_theta)
k <- 10
theta <- seq(0, 1, by=.001)
mydens_theta <- sapply(theta, function(theta) my_dbeta(theta, n, k, alpha, beta))
plot(mydens_theta)
cumsum(mydens_k)
plot(cumsum(mydens_k))
plot(1-cumsum(mydens_k))
runApp()
hypergeometric
?gamma
sapply(1:40, function(k) my_dbeta(k=k, theta=1/15, n=40, alpha=1, beta=1))
my_dbeta <- function(n, k, alpha, beta) {
a <- base::beta(alpha+k, beta+n-k)*choose(n, k)
b <- base::beta(alpha, beta)
x <- a/b
return(x)
}
sapply(1:40, function(k) my_dbeta(k=k, n=40, alpha=1, beta=1))
sapply(seq(0,1,100), function(k) my_dbeta(k=k, theta=1/15, n=40, alpha=1, beta=1))
sapply(seq(0,1,100), function(k) my_dbeta(k=k, n=40, alpha=1, beta=1))
sapply(seq(0,1,by=0.01), function(k) my_dbeta(k=k, n=40, alpha=1, beta=1))
plot(sapply(seq(0,1,by=0.01), function(k) my_dbeta(k=k, n=40, alpha=1, beta=1)))
my_dbeta <- function(n, k, alpha, beta) {
a <- base::beta(alpha+k, beta+n-k)*choose(n, k)
b <- base::beta(alpha, beta)
x <- a/b
return(x)
}
plot(sapply(seq(0,40,by=0.01), function(k) my_dbeta(k=k, n=40, alpha=1, beta=1)))
plot(sapply(seq(0,40,by=1), function(k) my_dbeta(k=k, n=40, alpha=1, beta=1)))
my_dbeta(n=10, 1,1,1)
my_dbeta(n=10, 12,1,1)
my_dbeta(n=10, 2,1,1)
my_dbeta(n=10, 3,1,1)
my_dbeta(n=10,43,1,1)
sapply(0:10, function(k) my_dbeta(n=10,k,.2,.25))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,.2,.25)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,600,400)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,2,2)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,1,1)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,1,1)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,1,100)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,1,10)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,.5,10)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,.1,10)))
plot(sapply(0:10, function(k) my_dbeta(n=10,k,2,10)))
plot(sapply(0:100, function(k) my_dbeta(n=100,k,2,10)))
sum(sapply(0:100, function(k) my_dbeta(n=10,k,2,10)))
sum(sapply(0:100, function(k) my_dbeta(n=10,k,2,10)))
sapply(0:100, function(k) my_dbeta(n=10,k,2,10))
plot(sapply(0:100, function(k) my_dbeta(n=10,k,2,10)))
plot(sapply(0:100, function(k) my_dbeta(n=100,k,2,10)))
sum(sapply(0:100, function(k) my_dbeta(n=100,k,2,10)))
sum(dens_k)
plot(dens_k)
n <- 100
my_dbeta <- function(n, k, alpha, beta) {
a <- base::beta(alpha+k, beta+n-k)*choose(n, k)
b <- base::beta(alpha, beta)
x <- a/b
return(x)
}
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, n, k, alpha, beta))
theta<- .1
alpha <- 2
beta <- 10
n <- 100
my_dbeta <- function(n, k, alpha, beta) {
a <- base::beta(alpha+k, beta+n-k)*choose(n, k)
b <- base::beta(alpha, beta)
x <- a/b
return(x)
}
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, n, k, alpha, beta))
my_dbeta <- function(n, k, alpha, beta) {
a <- base::beta(alpha+k, beta+n-k)*choose(n, k)
b <- base::beta(alpha, beta)
x <- a/b
return(x)
}
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, n, k, alpha, beta))
my_dbeta <- function(n, k, a, b) {
x <- base::beta(a+k, b+n-k)*choose(n, k)
y <- base::beta(a, b)
z <- x/y
return(z)
}
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
mydens_k <- sapply(0:n, function(k) my_dbeta(theta, n, k, alpha, beta))
mydens_k <- sapply(0:n, function(k) my_dbeta(n, k, alpha, beta))
plot(mydens_k)
plot(dens_k)
plot(mydens_k)
plot(dens_k)
dens_k <- sapply(0:n, function(k) pbeta(theta, alpha+k, beta+n-k))
plot(dens_k)
dens_k <- sapply(0:n, function(k) pbeta(theta, alpha+k, beta+n-k))
plot(mydens_k)
plot(dens_k)
dens_k <- sapply(0:n, function(k) dbeta(theta, alpha+k, beta+n-k))
mydens_k <- sapply(0:n, function(k) my_dbeta(n, k, alpha, beta))
plot(dens_k)
plot(mydens_k)
sum(mydens_k)
cumsum(mydens_k)
plot(cumsum(mydens_k))
runApp()
runApp()
runApp()
