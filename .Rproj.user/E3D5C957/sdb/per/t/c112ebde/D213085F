{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\nshinyServer(function(input, output) {\n  \n  x <- reactive({\n    x <- rbinom(input$n, size = 1, input$pi)\n  })\n  \n  output$posteriorPlot <- renderPlot({\n    \n    prob <- input$prob ## success probability\n    x <- x()\n    n <- length(x)\n    \n    alpha <- input$alpha\n    beta  <- input$beta\n    pi <- seq(0, 1, length.out=100)\n    \n    ## Data\n    k <- sum(x) ## number of successes\n    \n    ## Likelihood p(x|pi_test) with x ~ Bin(pi_test, alpha_test, beta)\n    # likelihood <- dbinom(k, n, pi)\n    # likelihood <- likelihood/sum(likelihood) ## Normalize Density\n\n    ## Prior p(pi) based on Beta(pi, alpha, beta)\n    prior <- dbeta(pi, alpha, beta)\n    prior <- prior/sum(prior) ## Normalize Density\n    \n    ## Posterior Distribution p(pi|x)\n    posterior <- dbeta(pi, alpha+k, beta+n-k)\n    posterior <- posterior/sum(posterior) ## Normalize Density\n    \n    \n    data <- data.frame(Pi=pi, \n                       Posterior=posterior, Prior=prior)\n    data.molten <- melt(data, id.vars = \"Pi\")\n    colnames(data.molten) <- c(\"Pi\", \"Function\", \"Density\")\n    \n    ggplot(data.molten, aes(x=Pi, y=Density)) +\n      geom_line(aes(colour=Function, linetype=Function), size=1.5) +\n      geom_text(x = Inf, y = Inf, label = paste0(\"n=\", n, hjust = 1.2, vjust = 1.2, size=10)) + \n      xlab(expression(pi)) +\n      scale_x_continuous(breaks = seq(0, 1.1, by=.1)) +\n      theme_bw() +\n      theme(plot.title   = element_text(size=15),\n            axis.text.x  = element_text(size=20),\n            axis.title.x = element_text(size=25),\n            axis.text.y  = element_text(size=20),\n            axis.title.y = element_text(size=25),\n            legend.title = element_blank(),\n            legend.text  = element_text(size=15))\n  })\n\n  \n  output$criticalValuePlot <- renderPlot({\n    \n    x_test <- x_test()\n    x_ref  <- x_ref()\n    n_test <- length(x_test)\n    n_ref <- length(x_ref)\n    \n    alpha_test <- input$alpha_test\n    alpha_ref <- input$alpha_ref\n    beta_test <- input$beta_test\n    beta_ref <- input$beta_ref\n    pi <- seq(0,1, length.out=100)\n    \n    ## Data\n    k_test <- sum(x_test) ## number of successes\n    k_ref <- sum(x_ref) ## number of successes\n    \n    ## Posterior Distribution p(pi_test|x)\n    posterior_test <- dbeta(pi, alpha_test+k_test, beta_test+n_test-k_test)\n    posterior_test <- posterior_test/sum(posterior_test) ## Normalize Density\n    posterior_ref  <- dbeta(pi, alpha_ref+k_ref, beta_ref+n_ref-k_ref)\n    posterior_ref  <- posterior_ref/sum(posterior_ref) ## Normalize Density\n    \n    \n    upper_crit <- 1-cumsum(posterior_ref)\n    lower_crit <- cumsum(posterior_ref)\n    \n    data <- data.frame(Pi=pi,\n                       upperCrit_Ref=upper_crit, lower_crit_Ref=lower_crit)\n    data.molten <- melt(data, id.vars = \"Pi\")\n    colnames(data.molten) <- c(\"Pi\", \"Function\", \"CriticalValue\")\n\n    ggplot(data.molten, aes(x=Pi, y=CriticalValue)) +\n      geom_line(aes(colour=Function, linetype=Function), size=1.5) +\n      geom_text(x = Inf, y = Inf, label = paste0(\"n=\", sum(n_test, n_ref)), hjust = 1.2, vjust = 1.2, size=10) +\n      xlab(expression(pi)) +\n      scale_x_continuous(breaks = seq(0, 1.1, by=.1)) +\n      theme_bw() +\n      theme(plot.title   = element_text(size=15),\n            axis.text.x  = element_text(size=20),\n            axis.title.x = element_text(size=25),\n            axis.text.y  = element_text(size=20),\n            axis.title.y = element_text(size=25),\n            legend.title = element_blank(),\n            legend.text  = element_text(size=15))\n  })\n})\n",
    "created" : 1494430953810.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "11|17|13|2|\n62|42|107|2|\n",
    "hash" : "3000006986",
    "id" : "D213085F",
    "lastKnownWriteTime" : 1496232753,
    "last_content_update" : 1496232753848,
    "path" : "~/workspace/R/projects/BayesianSampleSize/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}